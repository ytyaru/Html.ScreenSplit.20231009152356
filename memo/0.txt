# 画面分割

　HTMLで本のように段で分割したいことがある。通常はCSSの`column-count:2`などで対応する。ただ、スクロール表示するとき、位置ずれが発生して見切れてしまう。なんとかJavaScriptで計算したのが以下。それでも微妙に見切れてしまったり、スクロール位置がずれてしまう。

* https://github.com/ytyaru/Html.Responsive.FontSize.20230412115805

　そこで別のアプローチを試みるのが本件である。画面に表示するHTML要素のサイズを固定し、その中に収まる量のコンテンツを入れるというアプローチを模索したい。

　とりあえずサイズ内に収まるコンテンツ量の計算については対象外とする。あくまで画面全体のサイズを取得し、それを横２または縦２で分割し、サイズを固定するまでが対象。

　ブラウザをリサイズしたときは再計算が必要になる。

```html
<div class="screen vertical|horizontal">
    <div class="inner-screen"></div>
    <div class="splitter"></div>
    <div class="inner-screen"></div>
</div>
```
```css
screen {
    inline-size: 100%;
    block-size: 100%;
    font-size: var(--font-size);
    letter-spacing: var(--letter-spacing);
    line-height: var(--line-height);
    margin:0; padding:0;
    writing-mode: var(--writing-mode);
    text-orientation: var(--text-orientation);
    text-decoration: var(--text-orientation);
}
inner-screen {
    inline-size: 
    block-size: 
}
splitter {
    inline-size: 100%;
    block-size: 1px;
}
```

```javascript
// 画面分割
screenSplitter.vertical(2)
screenSplitter.horizontal(2)
screenSplitter.split({target:`body`, count:2, splitter:true, dir:vertical/horizontal})
screenSplitter.resize()

// 分割要素の取得
screenSplitter.screens()
```

　これには自動折り返し問題があるとわかった。三つのCSSプロパティ`word-break`, `line-break`, `overflow-wrap`によって自動で改行され、文字が画面外に出て見えなくなってしまうことが起こりうる。

```css
word-break: keep-all;
line-break: strict;
overflow-wrap: break-word;
```

　これを考慮して設定やテキスト分割をする必要がある。

# テキスト分割

## 単位

　文章は読者に何かを伝える文字の羅列である。文章構造にはいくつかのフレームワークがある。たとえばSDS、PREP、穴埋め法である。伝えるべき要素は5W1Hで示すこともできる。各要素はパラグラフで表現される。

　文章はそのフレームワークにかかわらず、パラグラフで構成されている。パラグラフとはひとつの話題を伝えるための文だ。文とは句点までの間にある文字列である。文は文節、語、字といったさらに小さな単位に細分化できるが、ここではひとまず文を最小単位と考えれば十分だ。

　複数の文でひとつのパラグラフを構成する。ひとつのパラグラフはひとつの話題だ。ひとつの話題を複数用意し、それを順序立てて、ひとつの主題について語る。これが文章である。

　文章の内容や目的によって意見文やら感想文やら報告書など呼び方が異なる。ここでは小説に限定する。小説はパラグラフを順序立てることで物語とするものだ。その構成はSDSやPREPを基本としつつも、三幕構成といった脚本の構成を参考にしたほうが相応しい。いずれにせよ、HTML上ではパラグラフ単位で自然言語による文章を書くことになる。

　テキスト分割は次の５単位で行われる。

* ファイル（章／部）
* パラグラフ
* 文
* 語
* 字

　もっとも大きな単位はファイルである。最大でも文庫本一冊分くらいにとどめるのがよいだろう。電子データであり物理的にかさばらないからといって、あらゆるジャンルの別作品を一つのデータに押し込んでも、それを抽出するための負荷がかさばってしまう。ロード時間がかかり読書体験の質が落ちてしまうだろう。そこで最大でも文庫本一冊分くらいにとどめるのがベターである。
　長編を完結までの文庫本十冊とするなら、それを一ファイルに収めたい需要もある。ただ、文庫本一冊分の10万字で300KBほどになるため、その十倍となると3MBだ。これは少々重い。JavaScriptで扱うには処理の遅延が起こるだろう。それでも最初から完結までを一ファイルに収めたい需要はある。複数ファイルだと一つ失うだけで完結できないからだ。そうした部分喪失のリスクを避けるためにも、たとえ重くとも一ファイルに収めたい需要はある。そこで、重いファイルでも非同期処理、イテレータ（ジェネレータ）、遅延ロードなどによって体感速度をあげる工夫をするのが最善である。

　パラグラフ単位。これは文章におけるひとつの話題だ。大抵は200〜400字くらいで収まるだろう。画面に収まりそうなサイズである。とはいえ、400字単位となると収まらないときの余白も大きくなる。もう少し小さな単位で分割したい。

　文。句点までの文字列だ。大抵は20〜40字くらいで収まるだろう。文の単位で分割すれば、読みやすさと頁数減少の両立がしやすい。

　句読点。日本語の改行規則（禁則処理）には、句読点が行頭に来ないようにするものがある。これは読みやすさのためだ。句点が行頭に来ないよう、その前の適当な所で改行してしまう。CSSのデフォルト設定はそうなっている。なので句点までを含めた文の単位で分割れば、これも考慮した分割ができる。だが、文より細かい字単位で分割しようとすると、句読点があるかどうかによって改行がひとつ多くなったり少なくなったりしてしまうことが起きうる。これを考慮した分割の実装は面倒だし、パフォーマンスも落ちる。

　語。二以上の字で構成された熟語の場合、途中で分割されるとわかりにくくなる。特に英語は顕著だ。そこで、単語の途中では分割されないようCSSでデフォルト設定されている。だが、新聞のように限られた紙面を有効活用したい場合、極限まで余白を削って文字を詰め込むために、熟語の途中でも分割してしまう設定にもできる。日本語の場合はたとえ熟語であり途中で分割されたとしても、英語ほど読みにくくはない。言語によってどうすべきか判断が変わる所だ。

　字。新聞のように一字でも多く詰め込むなら一字単位で分割するのがよい。ただし単語の途中で分割されたり、句読点が行頭にくるなど、読みやすさにおいて難のある段組みになってしまうだろう。長所は頁数が少なくなること。頁をめくる動作を減らせるので手間も減る。

　分割単位はどれにすべきか。文単位が最善だろう。これは処理のパフォーマンス、ページめくりの手間、文字の羅列の読みやすさを総合的に考慮した結果である。

　頁を減らして手間を省くべきか、それとも読みやすい単位を維持するために余白を増やして頁数が増えるのを妥協すべきか。はたして総合的にみて、どちらが読みやすいのか。場合によるだろう。ただ、パフォーマンスを考慮すると、分割判定の回数が少ないほうがいい。つまり文単位のほうが高速だ。字単位だと判定に時間がかかってしまう。よって文単位に軍配があがる。

　一文が長いときは無駄な余白が多くなるだろう。とはいえ長くとも一文。句点まで400字になることなど、そうそうない。ふつうは100字以内に終わる。これはスマホのような小さな画面に収まり超過しない範囲内であり、なおかつ意味としてもまとまりのある単位で、さらに一字ずつ超過判定するときと比べるとその文字数分だけ高速化できるようなバランスのとれた丁度いい単位といえる。よってテキストの最小分割単位は文単位とするのがベターである。

[word-break]:https://developer.mozilla.org/ja/docs/Web/CSS/word-break
[line-break]:https://developer.mozilla.org/ja/docs/Web/CSS/line-break
[overflow-wrap]:https://developer.mozilla.org/ja/docs/Web/CSS/overflow-wrap

